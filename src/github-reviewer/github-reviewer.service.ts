import { Ollama } from "ollama";
import { AxiosResponse } from "axios";
import { lastValueFrom, map, Observable } from "rxjs";
import { Injectable } from '@nestjs/common';
import { HttpService } from "@nestjs/axios";
import { ConfigService } from '@nestjs/config';
import { PullRequestSummary } from "./pull-request-summary";

@Injectable()
export class GithubReviewerService {
  llm: string;
  githubToken: string;

  constructor(private readonly httpService: HttpService, private readonly configService: ConfigService) {
    this.llm = this.configService.get<string>('LLM') ?? "qwen2.5-coder:1.5b";
    this.githubToken = this.configService.get<string>('GITHUB_TOKEN') ?? "";
  }
  
  prompt: string = `
    You are a highly skilled code reviewer that analyzes pull request diffs.

    You will receive a Git diff as input (showing added, removed, and context lines).

    Your task is to provide **technical and constructive comments** on the changes, focusing on:
    - logical or syntactic errors;
    - bad practices or code smells;
    - violations of style or naming conventions;
    - potential improvements (readability, performance, security, maintainability);
    - missing test cases or incomplete logic.

    Respond **only** in valid JSON format, following this exact structure:

    {
      "comments": [
        {
          "file": "FILE_NAME",
          "line": LINE_NUMBER,
          "comment": "Clear, technical, and constructive feedback on the modified code."
        }
      ]
    }

    Rules:
    - Include only meaningful and relevant comments.
    - Use the line number **from the changed file** (not the original source).
    - Do not summarize the whole pull request â€” comment only on modified code.
    - Keep comments concise and helpful.
    - If there are no relevant comments, respond with:
      {
        "comments": []
      }

    Now wait for the diff input to analyze.

    Observation: determine the correct line numbers for your comments.

    - Read the diff headers (lines starting with @@).
    - Use the number after the plus sign (+) as the starting line in the new file.
    - Count only lines beginning with "+" as additions.
    - Each "+" line increments the line number.
    - Ignore "-" lines when counting.
    - The "line" field in your JSON should correspond to the line number in the **new file**.
    
    If you are unsure, estimate conservatively but avoid using line numbers from removed lines.
  `;

  async processPullRequest(pullRequestSummary: PullRequestSummary): Promise<Error | void> {
    console.log(`receive request: ${JSON.stringify(pullRequestSummary)}`)

    if (pullRequestSummary.state != "open") {
      console.log(`Pull request has invalid state: ${pullRequestSummary.state}`);
      return new Error("Pull request is not open!");
    }

    if (!(pullRequestSummary.action == "opened" || pullRequestSummary.action == "synchronize")) {
      console.log("Pull request has not valid action.");
      return;
    }
    
    const diff = await this.requestPullRequestDiff(pullRequestSummary.diff_url);

    const ollama = new Ollama();
  
    const { message : { content } } = await ollama.chat({
      model: this.llm,
      messages: [
        { role: 'system', content: `You are a code reviewer. Analyze the diff and respond strictly in the JSON format described below.` },
        { role: 'system', content: this.prompt },
        { role: 'user', content: diff }
      ]
    })

    const review = JSON.parse(
      content
        .replace(/```json/g, '')
        .replace(/```/g, '')
        .trim()
    );

    if (!review || !review.comments) {
      console.log("Ollama return invalid value.");
      return new Error("Erro to generate review!");
    }

    console.log(`review result: ${JSON.stringify(review.comments)}`);

    await this.sendReviewComments(
      review.comments,
      pullRequestSummary.owner,
      pullRequestSummary.repo,
      pullRequestSummary.pull_number);

    return;
  }

  async requestPullRequestDiff(url: string): Promise<string> {
    const response: Observable<AxiosResponse<any>> = this.httpService.get(url);
    const data: string = await lastValueFrom(response.pipe(map(resp => resp.data)));
    return data;
  }

  async sendReviewComments(comments: any[], owner: string, repo: string, pull_number: number): Promise<any> {
    if (!comments || comments.length === 0) {
      console.log('No comments to send.');
      return;
    }

    const url = `https://api.github.com/repos/${owner}/${repo}/pulls/${pull_number}/reviews`;

    const payload = {
      body: 'ðŸ¤– Automated code review generated by AI.',
      event: 'COMMENT', // ou 'REQUEST_CHANGES' se quiser solicitar ajustes
      comments: comments.map((c) => ({
        path: c.file,
        line: c.line,
        body: c.comment,
        side: 'RIGHT',
      })),
    };

    try {
      const response$ = this.httpService.post(url, payload, {
        headers: {
          //Authorization: `Bearer ${token}`,
          Authorization: `Bearer ${this.githubToken}`,
          Accept: 'application/vnd.github+json',
          'Content-Type': 'application/json',
          'User-Agent': 'ai-review-bot',
        },
      });

      const result = await lastValueFrom(
        response$.pipe(map((resp) => resp.data))
      );

      console.log('Review sent successfully!');
      return result;
    } catch (error: any) {
      console.error('Failed to send review:', error.response?.data || error.message);
      throw new Error(`GitHub API error: ${error.message}`);
    }
  }
}
